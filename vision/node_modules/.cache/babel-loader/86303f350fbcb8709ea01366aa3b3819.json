{"remainingRequest":"C:\\Users\\12130\\Desktop\\电商实时监控平台\\vision\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\12130\\Desktop\\电商实时监控平台\\vision\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\12130\\Desktop\\电商实时监控平台\\vision\\src\\utils\\socket_service.js","dependencies":[{"path":"C:\\Users\\12130\\Desktop\\电商实时监控平台\\vision\\src\\utils\\socket_service.js","mtime":1624197091881},{"path":"C:\\Users\\12130\\Desktop\\电商实时监控平台\\vision\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1615108034129},{"path":"C:\\Users\\12130\\Desktop\\电商实时监控平台\\vision\\node_modules\\babel-loader\\lib\\index.js","mtime":1615108034142},{"path":"C:\\Users\\12130\\Desktop\\电商实时监控平台\\vision\\node_modules\\eslint-loader\\index.js","mtime":1615108054725}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICJDOi9Vc2Vycy8xMjEzMC9EZXNrdG9wL1x1NzUzNVx1NTU0Nlx1NUI5RVx1NjVGNlx1NzZEMVx1NjNBN1x1NUU3M1x1NTNGMC92aXNpb24vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrIjsKaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICJDOi9Vc2Vycy8xMjEzMC9EZXNrdG9wL1x1NzUzNVx1NTU0Nlx1NUI5RVx1NjVGNlx1NzZEMVx1NjNBN1x1NUU3M1x1NTNGMC92aXNpb24vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzIjsKaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tICJDOi9Vc2Vycy8xMjEzMC9EZXNrdG9wL1x1NzUzNVx1NTU0Nlx1NUI5RVx1NjVGNlx1NzZEMVx1NjNBN1x1NUU3M1x1NTNGMC92aXNpb24vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5IjsKCnZhciBTb2NrZXRTZXJ2aWNlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBTb2NrZXRTZXJ2aWNlKCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNvY2tldFNlcnZpY2UpOwoKICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCAid3MiLCBudWxsKTsKCiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgImNhbGxCYWNrTWFwcGluZyIsIHt9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgImNvbm5lY3RlZCIsIGZhbHNlKTsKCiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgInNlbmRSZXRyeUNvdW50IiwgMCk7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJjb25uZWN0UmV0cnlDb3VudCIsIDApOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFNvY2tldFNlcnZpY2UsIFt7CiAgICBrZXk6ICJjb25uZWN0IiwKICAgIHZhbHVlOiAvLyDlrprkuYnov57mjqXmnI3liqHlmajnmoTmlrnms5UKICAgIGZ1bmN0aW9uIGNvbm5lY3QoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICAvLyDov57mjqXmnI3liqHlmagKICAgICAgaWYgKCF3aW5kb3cuV2ViU29ja2V0KSB7CiAgICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKCfmgqjnmoTmtY/op4jlmajkuI3mlK/mjIFXZWJTb2NrZXQnKTsKICAgICAgfQoKICAgICAgdGhpcy53cyA9IG5ldyBXZWJTb2NrZXQoJ3dzOi8vbG9jYWxob3N0Ojk5OTknKTsgLy8g6L+e5o6l5oiQ5Yqf55qE5LqL5Lu2CgogICAgICB0aGlzLndzLm9ub3BlbiA9IGZ1bmN0aW9uICgpIHsKICAgICAgICBjb25zb2xlLmxvZygn6L+e5o6l5pyN5Yqh56uv5oiQ5Yqf5LqGJyk7CiAgICAgICAgX3RoaXMuY29ubmVjdGVkID0gdHJ1ZTsgLy8g6YeN572u6YeN5paw6L+e5o6l55qE5qyh5pWwCgogICAgICAgIF90aGlzLmNvbm5lY3RSZXRyeUNvdW50ID0gMDsKICAgICAgfTsgLy8gMS7ov57mjqXmnI3liqHlmajlpLHotKUKICAgICAgLy8gMi7lvZPov57mjqXmiJDlip/kuYvlkI7vvIzmnI3liqHlmajlhbPpl63nmoTmg4XlhrUKCgogICAgICB0aGlzLndzLm9uY2xvc2UgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgY29uc29sZS5sb2coJ+i/nuaOpeacjeWKoeerr+Wksei0pScpOwogICAgICAgIF90aGlzLmNvbm5lY3RlZCA9IGZhbHNlOwogICAgICAgIF90aGlzLmNvbm5lY3RSZXRyeUNvdW50Kys7CiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICBfdGhpcy5jb25uZWN0KCk7CiAgICAgICAgfSwgNTAwICogX3RoaXMuY29ubmVjdFJldHJ5Q291bnQpOwogICAgICB9OyAvLyDlvpfliLDmnI3liqHnq6/lj5HpgIHov4fmnaXnmoTmlbDmja4KCgogICAgICB0aGlzLndzLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChtc2cpIHsKICAgICAgICAvLyBjb25zb2xlLmxvZyhtc2cpCiAgICAgICAgLy8gY29uc29sZS5sb2coJ+S7juacjeWKoeerr+iOt+WPluWIsOS6huaVsOaNricpCiAgICAgICAgLy8g55yf5q2j5pyN5Yqh56uv5Y+R6YCB6L+H5p2l55qE5Y6f5aeL5pWw5o2u5ZyobXNn5Lit55qEZGF0YeWtl+autQogICAgICAgIC8vIGNvbnNvbGUubG9nKG1zZy5kYXRhKQogICAgICAgIC8vIGNvbnN0IHJlY3ZEYXRhID0gSlNPTi5zdHJpbmdpZnkobXNnLmRhdGEpCiAgICAgICAgdmFyIHJlY3ZEYXRhID0gSlNPTi5wYXJzZShtc2cuZGF0YSk7IC8vIGNvbnNvbGUubG9nKHJlY3ZEYXRhKQoKICAgICAgICB2YXIgc29ja2V0VHlwZSA9IHJlY3ZEYXRhLnNvY2tldFR5cGU7IC8vIGNvbnNvbGUubG9nKHNvY2tldFR5cGUpIC8vIHRyZW5kRGF0YeOAgXNlbGxlckRhdGHjgIFtYXBEYXRh44CBcmFua0RhdGHjgIFob3REYXRh44CBc3RvY2tEYXRhCiAgICAgICAgLy8g5Yik5pat5Zue6LCD5Ye95pWw5piv5ZCm5a2Y5ZyoCiAgICAgICAgLy8gY29uc29sZS5sb2codGhpcy5jYWxsQmFja01hcHBpbmcpIC8vIOWQhOS4quWuouaIt+err+eahOWbnuiwg+WHveaVsAoKICAgICAgICBpZiAoX3RoaXMuY2FsbEJhY2tNYXBwaW5nW3NvY2tldFR5cGVdKSB7CiAgICAgICAgICB2YXIgYWN0aW9uID0gcmVjdkRhdGEuYWN0aW9uOyAvLyBjb25zb2xlLmxvZygnMTIzJykKCiAgICAgICAgICBpZiAocmVjdkRhdGEuYWN0aW9uID09PSAnZ2V0RGF0YScpIHsKICAgICAgICAgICAgdmFyIHJlYWxEYXRhID0gcmVjdkRhdGEuZGF0YTsgLy8g5b6X5Yiw6K+l5Zu+6KGo55qE5pWw5o2uCiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHJlYWxEYXRhKQogICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLmNhbGxCYWNrTWFwcGluZ1tzb2NrZXRUeXBlXSkKCiAgICAgICAgICAgIF90aGlzLmNhbGxCYWNrTWFwcGluZ1tzb2NrZXRUeXBlXS5jYWxsKF90aGlzLCBKU09OLnBhcnNlKHJlYWxEYXRhKSk7CiAgICAgICAgICB9IGVsc2UgaWYgKGFjdGlvbiA9PT0gJ2Z1bGxTY3JlZW4nKSB7CiAgICAgICAgICAgIF90aGlzLmNhbGxCYWNrTWFwcGluZ1tzb2NrZXRUeXBlXS5jYWxsKF90aGlzLCByZWN2RGF0YSk7CiAgICAgICAgICB9IGVsc2UgaWYgKGFjdGlvbiA9PT0gJ3RoZW1lQ2hhbmdlJykgewogICAgICAgICAgICBfdGhpcy5jYWxsQmFja01hcHBpbmdbc29ja2V0VHlwZV0uY2FsbChfdGhpcywgcmVjdkRhdGEpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZWdpc3RlckNhbGxCYWNrIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZWdpc3RlckNhbGxCYWNrKHNvY2tldFR5cGUsIGNhbGxCYWNrKSB7CiAgICAgIC8vIOW+gCBjYWxsQmFja01hcOS4reWtmOaUvuWbnuiwg+WHveaVsAogICAgICB0aGlzLmNhbGxCYWNrTWFwcGluZ1tzb2NrZXRUeXBlXSA9IGNhbGxCYWNrOwogICAgfQogIH0sIHsKICAgIGtleTogInVuUmVnaXN0ZXJDYWxsQmFjayIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdW5SZWdpc3RlckNhbGxCYWNrKHNvY2tldFR5cGUpIHsKICAgICAgdGhpcy5jYWxsQmFja01hcHBpbmdbc29ja2V0VHlwZV0gPSBudWxsOwogICAgfSAvLyDlj5HpgIHmlbDmja7nmoTmlrnms5UKCiAgfSwgewogICAga2V5OiAic2VuZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2VuZChkYXRhKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgLy8g5Yik5pat5q2k5pe25q2k5Yi75pyJ5rKh5pyJ6L+e5o6l5oiQ5YqfCiAgICAgIGlmICh0aGlzLmNvbm5lY3RlZCkgewogICAgICAgIC8vIGNvbnNvbGUubG9nKCflj5HpgIHmlbDmja7nu5nmnI3liqHnq68nKQogICAgICAgIHRoaXMud3Muc2VuZChKU09OLnN0cmluZ2lmeShkYXRhKSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICBfdGhpczIuc2VuZFJldHJ5Q291bnQrKzsKCiAgICAgICAgICBfdGhpczIuc2VuZChkYXRhKTsgLy8g5Y+R6YCB5pWw5o2u5bCd6K+V55qE5qyh5pWw6LaK5aSnLCDliJnkuIvkuIDmrKHov57mjqXnmoTlu7bov5/kuZ/lsLHotorplb8KCiAgICAgICAgfSwgMjAwICogdGhpcy5zZW5kUmV0cnlDb3VudCk7CiAgICAgIH0KICAgIH0KICB9XSwgW3sKICAgIGtleTogIkluc3RhbmNlIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICBpZiAoIXRoaXMuaW5zdGFuY2UpIHsKICAgICAgICB0aGlzLmluc3RhbmNlID0gbmV3IFNvY2tldFNlcnZpY2UoKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHRoaXMuaW5zdGFuY2U7CiAgICB9IC8vIOWSjOacjeWKoeerr+i/nuaOpeeahHNvY2tldOWvueixoQoKICB9XSk7CgogIHJldHVybiBTb2NrZXRTZXJ2aWNlOwp9KCk7CgpfZGVmaW5lUHJvcGVydHkoU29ja2V0U2VydmljZSwgImluc3RhbmNlIiwgbnVsbCk7CgpleHBvcnQgeyBTb2NrZXRTZXJ2aWNlIGFzIGRlZmF1bHQgfTs="},{"version":3,"sources":["C:/Users/12130/Desktop/电商实时监控平台/vision/src/utils/socket_service.js"],"names":["SocketService","window","WebSocket","console","log","ws","onopen","connected","connectRetryCount","onclose","setTimeout","connect","onmessage","msg","recvData","JSON","parse","data","socketType","callBackMapping","action","realData","call","callBack","send","stringify","sendRetryCount","instance"],"mappings":"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","sourcesContent":["export default class SocketService {\r\n  /**\r\n   * 单例设计模式\r\n   */\r\n  static instance = null\r\n  static get Instance () {\r\n    if (!this.instance) {\r\n      this.instance = new SocketService()\r\n    }\r\n    return this.instance\r\n  }\r\n\r\n  // 和服务端连接的socket对象\r\n  ws = null\r\n  // 存储回调函数\r\n  callBackMapping = {}\r\n  // 是否已经连接成功\r\n  connected = false\r\n  // 记录重试的次数\r\n  sendRetryCount = 0\r\n  // 重新连接服务器的次数\r\n  connectRetryCount = 0\r\n  // 定义连接服务器的方法\r\n  connect () {\r\n    // 连接服务器\r\n    if (!window.WebSocket) {\r\n      return console.log('您的浏览器不支持WebSocket')\r\n    }\r\n    this.ws = new WebSocket('ws://localhost:9999')\r\n\r\n    // 连接成功的事件\r\n    this.ws.onopen = () => {\r\n      console.log('连接服务端成功了')\r\n      this.connected = true\r\n      // 重置重新连接的次数\r\n      this.connectRetryCount = 0\r\n    }\r\n    // 1.连接服务器失败\r\n    // 2.当连接成功之后，服务器关闭的情况\r\n    this.ws.onclose = () => {\r\n      console.log('连接服务端失败')\r\n      this.connected = false\r\n      this.connectRetryCount++\r\n      setTimeout(() => {\r\n        this.connect()\r\n      }, 500 * this.connectRetryCount)\r\n    }\r\n    // 得到服务端发送过来的数据\r\n    this.ws.onmessage = msg => {\r\n      // console.log(msg)\r\n      // console.log('从服务端获取到了数据')\r\n      // 真正服务端发送过来的原始数据在msg中的data字段\r\n      // console.log(msg.data)\r\n      // const recvData = JSON.stringify(msg.data)\r\n      const recvData = JSON.parse(msg.data)\r\n      // console.log(recvData)\r\n      const socketType = recvData.socketType\r\n      // console.log(socketType) // trendData、sellerData、mapData、rankData、hotData、stockData\r\n      // 判断回调函数是否存在\r\n      // console.log(this.callBackMapping) // 各个客户端的回调函数\r\n      if (this.callBackMapping[socketType]) {\r\n        const action = recvData.action\r\n        // console.log('123')\r\n        if (recvData.action === 'getData') {\r\n          const realData = recvData.data // 得到该图表的数据\r\n          // console.log(realData)\r\n          // console.log(this.callBackMapping[socketType])\r\n          this.callBackMapping[socketType].call(this, JSON.parse(realData))\r\n        } else if (action === 'fullScreen') {\r\n          this.callBackMapping[socketType].call(this, recvData)\r\n        } else if (action === 'themeChange') {\r\n          this.callBackMapping[socketType].call(this, recvData)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  registerCallBack (socketType, callBack) {\r\n    // 往 callBackMap中存放回调函数\r\n    this.callBackMapping[socketType] = callBack\r\n  }\r\n\r\n  unRegisterCallBack (socketType) {\r\n    this.callBackMapping[socketType] = null\r\n  }\r\n\r\n  // 发送数据的方法\r\n  send (data) {\r\n    // 判断此时此刻有没有连接成功\r\n    if (this.connected) {\r\n      // console.log('发送数据给服务端')\r\n      this.ws.send(JSON.stringify(data))\r\n    } else {\r\n      setTimeout(() => {\r\n        this.sendRetryCount++\r\n        this.send(data)\r\n        // 发送数据尝试的次数越大, 则下一次连接的延迟也就越长\r\n      }, 200 * this.sendRetryCount)\r\n    }\r\n  }\r\n}\r\n"]}]}