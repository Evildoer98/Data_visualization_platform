{"remainingRequest":"C:\\Users\\12130\\Desktop\\项目\\vision\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\12130\\Desktop\\项目\\vision\\src\\components\\Map.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\12130\\Desktop\\项目\\vision\\src\\components\\Map.vue","mtime":1616858210807},{"path":"C:\\Users\\12130\\Desktop\\项目\\vision\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1615108034129},{"path":"C:\\Users\\12130\\Desktop\\项目\\vision\\node_modules\\babel-loader\\lib\\index.js","mtime":1615108034142},{"path":"C:\\Users\\12130\\Desktop\\项目\\vision\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1615108034129},{"path":"C:\\Users\\12130\\Desktop\\项目\\vision\\node_modules\\vue-loader\\lib\\index.js","mtime":1615108060518}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KDQppbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnDQppbXBvcnQgeyBtYXBTdGF0ZSB9IGZyb20gJ3Z1ZXgnDQoNCmltcG9ydCB7IGdldFByb3ZpbmNlTWFwSW5mbyB9IGZyb20gJ0AvdXRpbHMvbWFwX3V0aWxzJw0KZXhwb3J0IGRlZmF1bHQgew0KICBkYXRhICgpIHsNCiAgICByZXR1cm4gew0KICAgICAgY2hhcnRJbnN0YW5jZTogbnVsbCwNCiAgICAgIGFsbERhdGE6IG51bGwsDQogICAgICBtYXBEYXRhOiB7fSAvLyDmiYDojrflj5bnmoTnnIHku73nmoTlnLDlm77nn6Lph4/mlbDmja7kv6Hmga8NCiAgICB9DQogIH0sDQogIGNvbXB1dGVkOiB7DQogICAgLi4ubWFwU3RhdGUoWyd0aGVtZSddKQ0KICB9LA0KICB3YXRjaDogew0KICAgIHRoZW1lICgpIHsNCiAgICAgIHRoaXMuY2hhcnRJbnN0YW5jZS5kaXNwb3NlKCkNCiAgICAgIHRoaXMuaW5pdENoYXJ0KCkNCiAgICAgIHRoaXMuc2NyZWVuQWRhcHRlcigpDQogICAgICB0aGlzLnVwZGF0ZUNoYXJ0KCkNCiAgICB9DQogIH0sDQoNCiAgY3JlYXRlZCAoKSB7DQogICAgLy8g5Zyo57uE5Lu25Yib5bu65a6M5oiQ5LmL5ZCO77yM6L+b6KGM5Zue6LCD5Ye95pWw55qE5rOo5YaMDQogICAgdGhpcy4kc29ja2V0LnJlZ2lzdGVyQ2FsbEJhY2soJ21hcERhdGEnLCB0aGlzLmdldERhdGEpDQogIH0sDQogIG1vdW50ZWQgKCkgew0KICAgIHRoaXMuaW5pdENoYXJ0KCkNCiAgICAvLyB0aGlzLmdldERhdGEoKQ0KICAgIHRoaXMuJHNvY2tldC5zZW5kKHsNCiAgICAgIGFjdGlvbjogJ2dldERhdGEnLA0KICAgICAgc29ja2V0VHlwZTogJ21hcERhdGEnLA0KICAgICAgY2hhck5hbWU6ICdtYXAnLA0KICAgICAgdmFsdWU6ICcnDQogICAgfSkNCiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5zY3JlZW5BZGFwdGVyKQ0KICAgIHRoaXMuc2NyZWVuQWRhcHRlcigpDQogIH0sDQogIGRlc3Ryb3llZCAoKSB7DQogICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc3ppZScsIHRoaXMuc2NyZWVuQWRhcHRlcikNCiAgICB0aGlzLiRzb2NrZXQudW5SZWdpc3RlckNhbGxCYWNrKCdtYXBEYXRhJykNCiAgfSwNCiAgbWV0aG9kczogew0KICAgIGFzeW5jIGluaXRDaGFydCAoKSB7DQogICAgICB0aGlzLmNoYXJ0SW5zdGFuY2UgPSB0aGlzLiRlY2hhcnRzLmluaXQodGhpcy4kcmVmcy5tYXBfcmVmLCB0aGlzLnRoZW1lKQ0KICAgICAgLy8g6I635Y+W5Lit5Zu95Zyw5Zu+55qE55+i6YeP5Zyw5Zu+DQogICAgICAvLyBodHRwOi8vbG9jYWxob3N0OjgwODAvc3RhdGljL21hcC9DaGluYS5qc29uDQogICAgICAvLyDnlLHkuo7miJHku6znjrDlnKjojrflj5bnmoTlnLDlm77nn6Lph4/mlbDmja7lubbkuI3mmK/kvY3kuo5LT0Ey55qE5ZCO5Y+wDQogICAgICBjb25zdCByZXQgPSBhd2FpdCBheGlvcy5nZXQoJ2h0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9zdGF0aWMvbWFwL0NoaW5hLmpzb24nKQ0KICAgICAgLy8gY29uc29sZS5sb2cocmV0KQ0KICAgICAgdGhpcy4kZWNoYXJ0cy5yZWdpc3Rlck1hcCgnY2hpbmEnLCByZXQuZGF0YSkNCiAgICAgIGNvbnN0IGluaXRPcHRpb24gPSB7DQogICAgICAgIHRpdGxlOiB7DQogICAgICAgICAgdGV4dDogJ+KUgyDllYblrrbliIbluIMnLA0KICAgICAgICAgIGxlZnQ6IDIwLA0KICAgICAgICAgIHRvcDogMjANCiAgICAgICAgfSwNCiAgICAgICAgZ2VvOiB7DQogICAgICAgICAgdHlwZTogJ21hcCcsDQogICAgICAgICAgbWFwOiAnY2hpbmEnLA0KICAgICAgICAgIHRvcDogJzUlJywNCiAgICAgICAgICBib3R0b206ICc1JScsDQogICAgICAgICAgaXRlbVN0eWxlOiB7DQogICAgICAgICAgICBhcmVhQ29sb3I6ICcjMkU3MkJGJywNCiAgICAgICAgICAgIGJvcmRlckNvbG9yOiAnIzMzMycNCiAgICAgICAgICB9DQogICAgICAgIH0sDQogICAgICAgIGxlZ2VuZDogew0KICAgICAgICAgIGxlZnQ6ICc1JScsDQogICAgICAgICAgYm90dG9tOiAnNSUnLA0KICAgICAgICAgIG9yaWVudDogJ3ZlcnRpY2FsJw0KICAgICAgICB9DQogICAgICB9DQogICAgICB0aGlzLmNoYXJ0SW5zdGFuY2Uuc2V0T3B0aW9uKGluaXRPcHRpb24pDQogICAgICB0aGlzLmNoYXJ0SW5zdGFuY2Uub24oJ2NsaWNrJywgYXN5bmMgYXJnID0+IHsNCiAgICAgICAgY29uc3QgcHJvdmluY2VJbmZvID0gZ2V0UHJvdmluY2VNYXBJbmZvKGFyZy5uYW1lKQ0KICAgICAgICAvLyDpnIDopoHojrflj5bnnIHku73nmoTlnLDlm77nn6Lph4/mlbDmja4NCiAgICAgICAgLy8g5Yik5pat5b2T5YmN5omA54K55Ye755qE55yB5Lu955qE5Zyw5Zu+55+i6YeP5pWw5o2u5piv5ZCm5ZyobWFwRGF0YeS4rQ0KICAgICAgICBpZiAoIXRoaXMubWFwRGF0YVtwcm92aW5jZUluZm8ua2V5XSkgew0KICAgICAgICAgIGNvbnN0IHJldCA9IGF3YWl0IGF4aW9zLmdldCgnaHR0cDovL2xvY2FsaG9zdDo4MDgwJyArIHByb3ZpbmNlSW5mby5wYXRoKQ0KICAgICAgICAgIHRoaXMubWFwRGF0YVtwcm92aW5jZUluZm8ua2V5XSA9IHJldC5kYXRhDQogICAgICAgICAgdGhpcy4kZWNoYXJ0cy5yZWdpc3Rlck1hcChwcm92aW5jZUluZm8ua2V5LCByZXQuZGF0YSkNCiAgICAgICAgfQ0KICAgICAgICBjb25zdCBjaGFuZ2VPcHRpb24gPSB7DQogICAgICAgICAgZ2VvOiB7DQogICAgICAgICAgICBtYXA6IHByb3ZpbmNlSW5mby5rZXkNCiAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgdGhpcy5jaGFydEluc3RhbmNlLnNldE9wdGlvbihjaGFuZ2VPcHRpb24pDQogICAgICB9KQ0KICAgIH0sDQogICAgLy8gYXN5bmMgZ2V0RGF0YSAoKSB7DQogICAgZ2V0RGF0YSAocmV0KSB7DQogICAgICAvLyBjb25zdCB7IGRhdGE6IHJldCB9ID0gYXdhaXQgdGhpcy4kaHR0cC5nZXQoJ21hcCcpDQogICAgICB0aGlzLmFsbERhdGEgPSByZXQNCiAgICAgIHRoaXMudXBkYXRlZENoYXJ0KCkNCiAgICB9LA0KICAgIHVwZGF0ZWRDaGFydCAoKSB7DQogICAgICAvLyDlm77kvovnmoTmlbDmja4NCiAgICAgIGNvbnN0IGxlZ2VuQXJyID0gdGhpcy5hbGxEYXRhLm1hcChpdGVtID0+IHsNCiAgICAgICAgcmV0dXJuIGl0ZW0ubmFtZQ0KICAgICAgfSkNCg0KICAgICAgLy8gcmV0dXJu6L+Z5Liq5a+56LGh5bCx5Luj6KGo55qE5piv5LiA5Liq57G75Yir5LiL55qE5omA5pyJ5pWj54K55pWw5o2uDQogICAgICAvLyDlpoLmnpzmg7PlnKjlnLDlm77kuK3mmL7npLrmlbDmja7vvIzmiYDku6XmiJHku6zpnIDopoHnu5nmlaPngrnnmoTlm77moIfmt7vliqDkuIDkuKrphY3nva7vvIxjb29yZGluYXRlU3lzdGVtOiBnZW8NCiAgICAgIGNvbnN0IHNlcmllc0FyciA9IHRoaXMuYWxsRGF0YS5tYXAoaXRlbSA9PiB7DQogICAgICAgIHJldHVybiB7DQogICAgICAgICAgdHlwZTogJ2VmZmVjdFNjYXR0ZXInLA0KICAgICAgICAgIHJpcHBsZUVmZmVjdDogew0KICAgICAgICAgICAgc2NhbGU6IDUsDQogICAgICAgICAgICBicnVzaFR5cGU6ICdzdHJva2UnDQogICAgICAgICAgfSwNCiAgICAgICAgICBuYW1lOiBpdGVtLm5hbWUsDQogICAgICAgICAgZGF0YTogaXRlbS5jaGlsZHJlbiwNCiAgICAgICAgICBjb29yZGluYXRlU3lzdGVtOiAnZ2VvJw0KICAgICAgICB9DQogICAgICB9KQ0KICAgICAgY29uc3QgZGF0YU9wdGlvbiA9IHsNCiAgICAgICAgbGVnZW5kOiB7DQogICAgICAgICAgZGF0YTogbGVnZW5BcnINCiAgICAgICAgfSwNCiAgICAgICAgc2VyaWVzOiBzZXJpZXNBcnINCiAgICAgIH0NCiAgICAgIHRoaXMuY2hhcnRJbnN0YW5jZS5zZXRPcHRpb24oZGF0YU9wdGlvbikNCiAgICB9LA0KICAgIHNjcmVlbkFkYXB0ZXIgKCkgew0KICAgICAgY29uc3QgdGl0bGVGb250U2l6ZSA9IHRoaXMuJHJlZnMubWFwX3JlZi5vZmZzZXRXaWR0aCAvIDEwMCAqIDMuNg0KICAgICAgY29uc3QgYWRhcHRlck9wdGlvbiA9IHsNCiAgICAgICAgdGl0bGU6IHsNCiAgICAgICAgICB0ZXh0U3R5bGU6IHsNCiAgICAgICAgICAgIGZvbnRTaXplOiB0aXRsZUZvbnRTaXplDQogICAgICAgICAgfQ0KICAgICAgICB9LA0KICAgICAgICBsZWdlbmQ6IHsNCiAgICAgICAgICBpdGVtV2lkdGg6IHRpdGxlRm9udFNpemUgLyAyLA0KICAgICAgICAgIGl0ZW1IaWdodDogdGl0bGVGb250U2l6ZSAvIDIsDQogICAgICAgICAgaXRlbUdhcDogdGl0bGVGb250U2l6ZSAvIDIsDQogICAgICAgICAgdGV4dFN0eWxlOiB7DQogICAgICAgICAgICBmb250U2l6ZTogdGl0bGVGb250U2l6ZSAvIDINCiAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgIH0NCiAgICAgIHRoaXMuY2hhcnRJbnN0YW5jZS5zZXRPcHRpb24oYWRhcHRlck9wdGlvbikNCiAgICAgIHRoaXMuY2hhcnRJbnN0YW5jZS5yZXNpemUoKQ0KICAgIH0sDQogICAgLy8g5Zue5Yiw5Lit5Zu95Zyw5Zu+DQogICAgcmV2ZXJ0TWFwICgpIHsNCiAgICAgIGNvbnN0IHJldmVydE9wdGlvbiA9IHsNCiAgICAgICAgZ2VvOiB7DQogICAgICAgICAgbWFwOiAnY2hpbmEnDQogICAgICAgIH0NCiAgICAgIH0NCiAgICAgIHRoaXMuY2hhcnRJbnN0YW5jZS5zZXRPcHRpb24ocmV2ZXJ0T3B0aW9uKQ0KICAgIH0NCg0KICB9DQp9DQo="},{"version":3,"sources":["Map.vue"],"names":[],"mappings":";;;;;;;;AAQA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","file":"Map.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n    <div class=\"com-container\" @dblclick=\"revertMap\">\r\n        <div class=\"com-chart\" ref=\"map_ref\">\r\n\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\nimport axios from 'axios'\r\nimport { mapState } from 'vuex'\r\n\r\nimport { getProvinceMapInfo } from '@/utils/map_utils'\r\nexport default {\r\n  data () {\r\n    return {\r\n      chartInstance: null,\r\n      allData: null,\r\n      mapData: {} // 所获取的省份的地图矢量数据信息\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapState(['theme'])\r\n  },\r\n  watch: {\r\n    theme () {\r\n      this.chartInstance.dispose()\r\n      this.initChart()\r\n      this.screenAdapter()\r\n      this.updateChart()\r\n    }\r\n  },\r\n\r\n  created () {\r\n    // 在组件创建完成之后，进行回调函数的注册\r\n    this.$socket.registerCallBack('mapData', this.getData)\r\n  },\r\n  mounted () {\r\n    this.initChart()\r\n    // this.getData()\r\n    this.$socket.send({\r\n      action: 'getData',\r\n      socketType: 'mapData',\r\n      charName: 'map',\r\n      value: ''\r\n    })\r\n    window.addEventListener('resize', this.screenAdapter)\r\n    this.screenAdapter()\r\n  },\r\n  destroyed () {\r\n    window.removeEventListener('reszie', this.screenAdapter)\r\n    this.$socket.unRegisterCallBack('mapData')\r\n  },\r\n  methods: {\r\n    async initChart () {\r\n      this.chartInstance = this.$echarts.init(this.$refs.map_ref, this.theme)\r\n      // 获取中国地图的矢量地图\r\n      // http://localhost:8080/static/map/China.json\r\n      // 由于我们现在获取的地图矢量数据并不是位于KOA2的后台\r\n      const ret = await axios.get('http://localhost:8080/static/map/China.json')\r\n      // console.log(ret)\r\n      this.$echarts.registerMap('china', ret.data)\r\n      const initOption = {\r\n        title: {\r\n          text: '┃ 商家分布',\r\n          left: 20,\r\n          top: 20\r\n        },\r\n        geo: {\r\n          type: 'map',\r\n          map: 'china',\r\n          top: '5%',\r\n          bottom: '5%',\r\n          itemStyle: {\r\n            areaColor: '#2E72BF',\r\n            borderColor: '#333'\r\n          }\r\n        },\r\n        legend: {\r\n          left: '5%',\r\n          bottom: '5%',\r\n          orient: 'vertical'\r\n        }\r\n      }\r\n      this.chartInstance.setOption(initOption)\r\n      this.chartInstance.on('click', async arg => {\r\n        const provinceInfo = getProvinceMapInfo(arg.name)\r\n        // 需要获取省份的地图矢量数据\r\n        // 判断当前所点击的省份的地图矢量数据是否在mapData中\r\n        if (!this.mapData[provinceInfo.key]) {\r\n          const ret = await axios.get('http://localhost:8080' + provinceInfo.path)\r\n          this.mapData[provinceInfo.key] = ret.data\r\n          this.$echarts.registerMap(provinceInfo.key, ret.data)\r\n        }\r\n        const changeOption = {\r\n          geo: {\r\n            map: provinceInfo.key\r\n          }\r\n        }\r\n        this.chartInstance.setOption(changeOption)\r\n      })\r\n    },\r\n    // async getData () {\r\n    getData (ret) {\r\n      // const { data: ret } = await this.$http.get('map')\r\n      this.allData = ret\r\n      this.updatedChart()\r\n    },\r\n    updatedChart () {\r\n      // 图例的数据\r\n      const legenArr = this.allData.map(item => {\r\n        return item.name\r\n      })\r\n\r\n      // return这个对象就代表的是一个类别下的所有散点数据\r\n      // 如果想在地图中显示数据，所以我们需要给散点的图标添加一个配置，coordinateSystem: geo\r\n      const seriesArr = this.allData.map(item => {\r\n        return {\r\n          type: 'effectScatter',\r\n          rippleEffect: {\r\n            scale: 5,\r\n            brushType: 'stroke'\r\n          },\r\n          name: item.name,\r\n          data: item.children,\r\n          coordinateSystem: 'geo'\r\n        }\r\n      })\r\n      const dataOption = {\r\n        legend: {\r\n          data: legenArr\r\n        },\r\n        series: seriesArr\r\n      }\r\n      this.chartInstance.setOption(dataOption)\r\n    },\r\n    screenAdapter () {\r\n      const titleFontSize = this.$refs.map_ref.offsetWidth / 100 * 3.6\r\n      const adapterOption = {\r\n        title: {\r\n          textStyle: {\r\n            fontSize: titleFontSize\r\n          }\r\n        },\r\n        legend: {\r\n          itemWidth: titleFontSize / 2,\r\n          itemHight: titleFontSize / 2,\r\n          itemGap: titleFontSize / 2,\r\n          textStyle: {\r\n            fontSize: titleFontSize / 2\r\n          }\r\n        }\r\n      }\r\n      this.chartInstance.setOption(adapterOption)\r\n      this.chartInstance.resize()\r\n    },\r\n    // 回到中国地图\r\n    revertMap () {\r\n      const revertOption = {\r\n        geo: {\r\n          map: 'china'\r\n        }\r\n      }\r\n      this.chartInstance.setOption(revertOption)\r\n    }\r\n\r\n  }\r\n}\r\n</script>\r\n<style>\r\n\r\n</style>\r\n"]}]}