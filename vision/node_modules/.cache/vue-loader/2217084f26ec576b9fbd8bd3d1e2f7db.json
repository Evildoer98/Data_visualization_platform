{"remainingRequest":"C:\\Users\\12130\\Desktop\\电商实时监控平台\\vision\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\12130\\Desktop\\电商实时监控平台\\vision\\src\\components\\Map.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\12130\\Desktop\\电商实时监控平台\\vision\\src\\components\\Map.vue","mtime":1624006297895},{"path":"C:\\Users\\12130\\Desktop\\电商实时监控平台\\vision\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1615108034129},{"path":"C:\\Users\\12130\\Desktop\\电商实时监控平台\\vision\\node_modules\\babel-loader\\lib\\index.js","mtime":1615108034142},{"path":"C:\\Users\\12130\\Desktop\\电商实时监控平台\\vision\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1615108034129},{"path":"C:\\Users\\12130\\Desktop\\电商实时监控平台\\vision\\node_modules\\vue-loader\\lib\\index.js","mtime":1615108060518}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KDQppbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnDQppbXBvcnQgeyBtYXBTdGF0ZSB9IGZyb20gJ3Z1ZXgnDQoNCmltcG9ydCB7IGdldFByb3ZpbmNlTWFwSW5mbyB9IGZyb20gJ0AvdXRpbHMvbWFwX3V0aWxzJw0KZXhwb3J0IGRlZmF1bHQgew0KICBkYXRhICgpIHsNCiAgICByZXR1cm4gew0KICAgICAgY2hhcnRJbnN0YW5jZTogbnVsbCwNCiAgICAgIGFsbERhdGE6IG51bGwsDQogICAgICBtYXBEYXRhOiB7fSAvLyDmiYDojrflj5bnmoTnnIHku73nmoTlnLDlm77nn6Lph4/mlbDmja7kv6Hmga8NCiAgICB9DQogIH0sDQogIGNvbXB1dGVkOiB7DQogICAgLi4ubWFwU3RhdGUoWyd0aGVtZSddKQ0KICB9LA0KICB3YXRjaDogew0KICAgIHRoZW1lICgpIHsNCiAgICAgIHRoaXMuY2hhcnRJbnN0YW5jZS5kaXNwb3NlKCkNCiAgICAgIHRoaXMuaW5pdENoYXJ0KCkNCiAgICAgIHRoaXMuc2NyZWVuQWRhcHRlcigpDQogICAgICB0aGlzLnVwZGF0ZWRDaGFydCgpDQogICAgfQ0KICB9LA0KDQogIGNyZWF0ZWQgKCkgew0KICAgIC8vIOWcqOe7hOS7tuWIm+W7uuWujOaIkOS5i+WQju+8jOi/m+ihjOWbnuiwg+WHveaVsOeahOazqOWGjA0KICAgIHRoaXMuJHNvY2tldC5yZWdpc3RlckNhbGxCYWNrKCdtYXBEYXRhJywgdGhpcy5nZXREYXRhKQ0KICB9LA0KICBtb3VudGVkICgpIHsNCiAgICB0aGlzLmluaXRDaGFydCgpDQogICAgLy8gdGhpcy5nZXREYXRhKCkNCiAgICB0aGlzLiRzb2NrZXQuc2VuZCh7DQogICAgICBhY3Rpb246ICdnZXREYXRhJywNCiAgICAgIHNvY2tldFR5cGU6ICdtYXBEYXRhJywNCiAgICAgIGNoYXJOYW1lOiAnbWFwJywNCiAgICAgIHZhbHVlOiAnJw0KICAgIH0pDQogICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuc2NyZWVuQWRhcHRlcikNCiAgICB0aGlzLnNjcmVlbkFkYXB0ZXIoKQ0KICB9LA0KICBkZXN0cm95ZWQgKCkgew0KICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXN6aWUnLCB0aGlzLnNjcmVlbkFkYXB0ZXIpDQogICAgdGhpcy4kc29ja2V0LnVuUmVnaXN0ZXJDYWxsQmFjaygnbWFwRGF0YScpDQogIH0sDQogIG1ldGhvZHM6IHsNCiAgICBhc3luYyBpbml0Q2hhcnQgKCkgew0KICAgICAgdGhpcy5jaGFydEluc3RhbmNlID0gdGhpcy4kZWNoYXJ0cy5pbml0KHRoaXMuJHJlZnMubWFwX3JlZiwgdGhpcy50aGVtZSkNCiAgICAgIC8vIOiOt+WPluS4reWbveWcsOWbvueahOefoumHj+WcsOWbvg0KICAgICAgLy8gaHR0cDovL2xvY2FsaG9zdDo4MDgwL3N0YXRpYy9tYXAvQ2hpbmEuanNvbg0KICAgICAgLy8g55Sx5LqO5oiR5Lus546w5Zyo6I635Y+W55qE5Zyw5Zu+55+i6YeP5pWw5o2u5bm25LiN5piv5L2N5LqOS09BMueahOWQjuWPsA0KICAgICAgY29uc3QgcmV0ID0gYXdhaXQgYXhpb3MuZ2V0KCdodHRwOi8vbG9jYWxob3N0OjgwODAvc3RhdGljL21hcC9DaGluYS5qc29uJykNCiAgICAgIC8vIGNvbnNvbGUubG9nKHJldCkNCiAgICAgIHRoaXMuJGVjaGFydHMucmVnaXN0ZXJNYXAoJ2NoaW5hJywgcmV0LmRhdGEpDQogICAgICBjb25zdCBpbml0T3B0aW9uID0gew0KICAgICAgICB0aXRsZTogew0KICAgICAgICAgIHRleHQ6ICfilIMg5ZWG5a625YiG5biDJywNCiAgICAgICAgICBsZWZ0OiAyMCwNCiAgICAgICAgICB0b3A6IDIwDQogICAgICAgIH0sDQogICAgICAgIGdlbzogew0KICAgICAgICAgIHR5cGU6ICdtYXAnLA0KICAgICAgICAgIG1hcDogJ2NoaW5hJywNCiAgICAgICAgICB0b3A6ICc1JScsDQogICAgICAgICAgYm90dG9tOiAnNSUnLA0KICAgICAgICAgIGl0ZW1TdHlsZTogew0KICAgICAgICAgICAgYXJlYUNvbG9yOiAnIzJFNzJCRicsDQogICAgICAgICAgICBib3JkZXJDb2xvcjogJyMzMzMnDQogICAgICAgICAgfQ0KICAgICAgICB9LA0KICAgICAgICBsZWdlbmQ6IHsNCiAgICAgICAgICBsZWZ0OiAnNSUnLA0KICAgICAgICAgIGJvdHRvbTogJzUlJywNCiAgICAgICAgICBvcmllbnQ6ICd2ZXJ0aWNhbCcNCiAgICAgICAgfQ0KICAgICAgfQ0KICAgICAgdGhpcy5jaGFydEluc3RhbmNlLnNldE9wdGlvbihpbml0T3B0aW9uKQ0KICAgICAgdGhpcy5jaGFydEluc3RhbmNlLm9uKCdjbGljaycsIGFzeW5jIGFyZyA9PiB7DQogICAgICAgIGNvbnN0IHByb3ZpbmNlSW5mbyA9IGdldFByb3ZpbmNlTWFwSW5mbyhhcmcubmFtZSkNCiAgICAgICAgLy8g6ZyA6KaB6I635Y+W55yB5Lu955qE5Zyw5Zu+55+i6YeP5pWw5o2uDQogICAgICAgIC8vIOWIpOaWreW9k+WJjeaJgOeCueWHu+eahOecgeS7veeahOWcsOWbvuefoumHj+aVsOaNruaYr+WQpuWcqG1hcERhdGHkuK0NCiAgICAgICAgaWYgKCF0aGlzLm1hcERhdGFbcHJvdmluY2VJbmZvLmtleV0pIHsNCiAgICAgICAgICBjb25zdCByZXQgPSBhd2FpdCBheGlvcy5nZXQoJ2h0dHA6Ly9sb2NhbGhvc3Q6ODA4MCcgKyBwcm92aW5jZUluZm8ucGF0aCkNCiAgICAgICAgICB0aGlzLm1hcERhdGFbcHJvdmluY2VJbmZvLmtleV0gPSByZXQuZGF0YQ0KICAgICAgICAgIHRoaXMuJGVjaGFydHMucmVnaXN0ZXJNYXAocHJvdmluY2VJbmZvLmtleSwgcmV0LmRhdGEpDQogICAgICAgIH0NCiAgICAgICAgY29uc3QgY2hhbmdlT3B0aW9uID0gew0KICAgICAgICAgIGdlbzogew0KICAgICAgICAgICAgbWFwOiBwcm92aW5jZUluZm8ua2V5DQogICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIHRoaXMuY2hhcnRJbnN0YW5jZS5zZXRPcHRpb24oY2hhbmdlT3B0aW9uKQ0KICAgICAgfSkNCiAgICB9LA0KICAgIC8vIGFzeW5jIGdldERhdGEgKCkgew0KICAgIGdldERhdGEgKHJldCkgew0KICAgICAgLy8gY29uc3QgeyBkYXRhOiByZXQgfSA9IGF3YWl0IHRoaXMuJGh0dHAuZ2V0KCdtYXAnKQ0KICAgICAgdGhpcy5hbGxEYXRhID0gcmV0DQogICAgICB0aGlzLnVwZGF0ZWRDaGFydCgpDQogICAgfSwNCiAgICB1cGRhdGVkQ2hhcnQgKCkgew0KICAgICAgLy8g5Zu+5L6L55qE5pWw5o2uDQogICAgICBjb25zdCBsZWdlbkFyciA9IHRoaXMuYWxsRGF0YS5tYXAoaXRlbSA9PiB7DQogICAgICAgIHJldHVybiBpdGVtLm5hbWUNCiAgICAgIH0pDQoNCiAgICAgIC8vIHJldHVybui/meS4quWvueixoeWwseS7o+ihqOeahOaYr+S4gOS4quexu+WIq+S4i+eahOaJgOacieaVo+eCueaVsOaNrg0KICAgICAgLy8g5aaC5p6c5oOz5Zyo5Zyw5Zu+5Lit5pi+56S65pWw5o2u77yM5omA5Lul5oiR5Lus6ZyA6KaB57uZ5pWj54K555qE5Zu+5qCH5re75Yqg5LiA5Liq6YWN572u77yMY29vcmRpbmF0ZVN5c3RlbTogZ2VvDQogICAgICBjb25zdCBzZXJpZXNBcnIgPSB0aGlzLmFsbERhdGEubWFwKGl0ZW0gPT4gew0KICAgICAgICByZXR1cm4gew0KICAgICAgICAgIHR5cGU6ICdlZmZlY3RTY2F0dGVyJywNCiAgICAgICAgICByaXBwbGVFZmZlY3Q6IHsNCiAgICAgICAgICAgIHNjYWxlOiA1LA0KICAgICAgICAgICAgYnJ1c2hUeXBlOiAnc3Ryb2tlJw0KICAgICAgICAgIH0sDQogICAgICAgICAgbmFtZTogaXRlbS5uYW1lLA0KICAgICAgICAgIGRhdGE6IGl0ZW0uY2hpbGRyZW4sDQogICAgICAgICAgY29vcmRpbmF0ZVN5c3RlbTogJ2dlbycNCiAgICAgICAgfQ0KICAgICAgfSkNCiAgICAgIGNvbnN0IGRhdGFPcHRpb24gPSB7DQogICAgICAgIGxlZ2VuZDogew0KICAgICAgICAgIGRhdGE6IGxlZ2VuQXJyDQogICAgICAgIH0sDQogICAgICAgIHNlcmllczogc2VyaWVzQXJyDQogICAgICB9DQogICAgICB0aGlzLmNoYXJ0SW5zdGFuY2Uuc2V0T3B0aW9uKGRhdGFPcHRpb24pDQogICAgfSwNCiAgICBzY3JlZW5BZGFwdGVyICgpIHsNCiAgICAgIGNvbnN0IHRpdGxlRm9udFNpemUgPSB0aGlzLiRyZWZzLm1hcF9yZWYub2Zmc2V0V2lkdGggLyAxMDAgKiAzLjYNCiAgICAgIGNvbnN0IGFkYXB0ZXJPcHRpb24gPSB7DQogICAgICAgIHRpdGxlOiB7DQogICAgICAgICAgdGV4dFN0eWxlOiB7DQogICAgICAgICAgICBmb250U2l6ZTogdGl0bGVGb250U2l6ZQ0KICAgICAgICAgIH0NCiAgICAgICAgfSwNCiAgICAgICAgbGVnZW5kOiB7DQogICAgICAgICAgaXRlbVdpZHRoOiB0aXRsZUZvbnRTaXplIC8gMiwNCiAgICAgICAgICBpdGVtSGlnaHQ6IHRpdGxlRm9udFNpemUgLyAyLA0KICAgICAgICAgIGl0ZW1HYXA6IHRpdGxlRm9udFNpemUgLyAyLA0KICAgICAgICAgIHRleHRTdHlsZTogew0KICAgICAgICAgICAgZm9udFNpemU6IHRpdGxlRm9udFNpemUgLyAyDQogICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICB9DQogICAgICB0aGlzLmNoYXJ0SW5zdGFuY2Uuc2V0T3B0aW9uKGFkYXB0ZXJPcHRpb24pDQogICAgICB0aGlzLmNoYXJ0SW5zdGFuY2UucmVzaXplKCkNCiAgICB9LA0KICAgIC8vIOWbnuWIsOS4reWbveWcsOWbvg0KICAgIHJldmVydE1hcCAoKSB7DQogICAgICBjb25zdCByZXZlcnRPcHRpb24gPSB7DQogICAgICAgIGdlbzogew0KICAgICAgICAgIG1hcDogJ2NoaW5hJw0KICAgICAgICB9DQogICAgICB9DQogICAgICB0aGlzLmNoYXJ0SW5zdGFuY2Uuc2V0T3B0aW9uKHJldmVydE9wdGlvbikNCiAgICB9DQoNCiAgfQ0KfQ0K"},{"version":3,"sources":["Map.vue"],"names":[],"mappings":";;;;;;;;;AASA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","file":"Map.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <!-- 商家分布图表 -->\r\n    <div class=\"com-container\" @dblclick=\"revertMap\">\r\n        <div class=\"com-chart\" ref=\"map_ref\">\r\n\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\nimport axios from 'axios'\r\nimport { mapState } from 'vuex'\r\n\r\nimport { getProvinceMapInfo } from '@/utils/map_utils'\r\nexport default {\r\n  data () {\r\n    return {\r\n      chartInstance: null,\r\n      allData: null,\r\n      mapData: {} // 所获取的省份的地图矢量数据信息\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapState(['theme'])\r\n  },\r\n  watch: {\r\n    theme () {\r\n      this.chartInstance.dispose()\r\n      this.initChart()\r\n      this.screenAdapter()\r\n      this.updatedChart()\r\n    }\r\n  },\r\n\r\n  created () {\r\n    // 在组件创建完成之后，进行回调函数的注册\r\n    this.$socket.registerCallBack('mapData', this.getData)\r\n  },\r\n  mounted () {\r\n    this.initChart()\r\n    // this.getData()\r\n    this.$socket.send({\r\n      action: 'getData',\r\n      socketType: 'mapData',\r\n      charName: 'map',\r\n      value: ''\r\n    })\r\n    window.addEventListener('resize', this.screenAdapter)\r\n    this.screenAdapter()\r\n  },\r\n  destroyed () {\r\n    window.removeEventListener('reszie', this.screenAdapter)\r\n    this.$socket.unRegisterCallBack('mapData')\r\n  },\r\n  methods: {\r\n    async initChart () {\r\n      this.chartInstance = this.$echarts.init(this.$refs.map_ref, this.theme)\r\n      // 获取中国地图的矢量地图\r\n      // http://localhost:8080/static/map/China.json\r\n      // 由于我们现在获取的地图矢量数据并不是位于KOA2的后台\r\n      const ret = await axios.get('http://localhost:8080/static/map/China.json')\r\n      // console.log(ret)\r\n      this.$echarts.registerMap('china', ret.data)\r\n      const initOption = {\r\n        title: {\r\n          text: '┃ 商家分布',\r\n          left: 20,\r\n          top: 20\r\n        },\r\n        geo: {\r\n          type: 'map',\r\n          map: 'china',\r\n          top: '5%',\r\n          bottom: '5%',\r\n          itemStyle: {\r\n            areaColor: '#2E72BF',\r\n            borderColor: '#333'\r\n          }\r\n        },\r\n        legend: {\r\n          left: '5%',\r\n          bottom: '5%',\r\n          orient: 'vertical'\r\n        }\r\n      }\r\n      this.chartInstance.setOption(initOption)\r\n      this.chartInstance.on('click', async arg => {\r\n        const provinceInfo = getProvinceMapInfo(arg.name)\r\n        // 需要获取省份的地图矢量数据\r\n        // 判断当前所点击的省份的地图矢量数据是否在mapData中\r\n        if (!this.mapData[provinceInfo.key]) {\r\n          const ret = await axios.get('http://localhost:8080' + provinceInfo.path)\r\n          this.mapData[provinceInfo.key] = ret.data\r\n          this.$echarts.registerMap(provinceInfo.key, ret.data)\r\n        }\r\n        const changeOption = {\r\n          geo: {\r\n            map: provinceInfo.key\r\n          }\r\n        }\r\n        this.chartInstance.setOption(changeOption)\r\n      })\r\n    },\r\n    // async getData () {\r\n    getData (ret) {\r\n      // const { data: ret } = await this.$http.get('map')\r\n      this.allData = ret\r\n      this.updatedChart()\r\n    },\r\n    updatedChart () {\r\n      // 图例的数据\r\n      const legenArr = this.allData.map(item => {\r\n        return item.name\r\n      })\r\n\r\n      // return这个对象就代表的是一个类别下的所有散点数据\r\n      // 如果想在地图中显示数据，所以我们需要给散点的图标添加一个配置，coordinateSystem: geo\r\n      const seriesArr = this.allData.map(item => {\r\n        return {\r\n          type: 'effectScatter',\r\n          rippleEffect: {\r\n            scale: 5,\r\n            brushType: 'stroke'\r\n          },\r\n          name: item.name,\r\n          data: item.children,\r\n          coordinateSystem: 'geo'\r\n        }\r\n      })\r\n      const dataOption = {\r\n        legend: {\r\n          data: legenArr\r\n        },\r\n        series: seriesArr\r\n      }\r\n      this.chartInstance.setOption(dataOption)\r\n    },\r\n    screenAdapter () {\r\n      const titleFontSize = this.$refs.map_ref.offsetWidth / 100 * 3.6\r\n      const adapterOption = {\r\n        title: {\r\n          textStyle: {\r\n            fontSize: titleFontSize\r\n          }\r\n        },\r\n        legend: {\r\n          itemWidth: titleFontSize / 2,\r\n          itemHight: titleFontSize / 2,\r\n          itemGap: titleFontSize / 2,\r\n          textStyle: {\r\n            fontSize: titleFontSize / 2\r\n          }\r\n        }\r\n      }\r\n      this.chartInstance.setOption(adapterOption)\r\n      this.chartInstance.resize()\r\n    },\r\n    // 回到中国地图\r\n    revertMap () {\r\n      const revertOption = {\r\n        geo: {\r\n          map: 'china'\r\n        }\r\n      }\r\n      this.chartInstance.setOption(revertOption)\r\n    }\r\n\r\n  }\r\n}\r\n</script>\r\n<style>\r\n\r\n</style>\r\n"]}]}