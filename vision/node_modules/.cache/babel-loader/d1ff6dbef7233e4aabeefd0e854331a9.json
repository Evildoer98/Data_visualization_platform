{"remainingRequest":"C:\\Users\\12130\\Desktop\\项目\\vision\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\12130\\Desktop\\项目\\vision\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\12130\\Desktop\\项目\\vision\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\12130\\Desktop\\项目\\vision\\src\\components\\Map.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\12130\\Desktop\\项目\\vision\\src\\components\\Map.vue","mtime":1616899244619},{"path":"C:\\Users\\12130\\Desktop\\项目\\vision\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1615108034129},{"path":"C:\\Users\\12130\\Desktop\\项目\\vision\\node_modules\\babel-loader\\lib\\index.js","mtime":1615108034142},{"path":"C:\\Users\\12130\\Desktop\\项目\\vision\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1615108034129},{"path":"C:\\Users\\12130\\Desktop\\项目\\vision\\node_modules\\vue-loader\\lib\\index.js","mtime":1615108060518},{"path":"C:\\Users\\12130\\Desktop\\项目\\vision\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1615108034129},{"path":"C:\\Users\\12130\\Desktop\\项目\\vision\\node_modules\\babel-loader\\lib\\index.js","mtime":1615108034142},{"path":"C:\\Users\\12130\\Desktop\\项目\\vision\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1615108034129},{"path":"C:\\Users\\12130\\Desktop\\项目\\vision\\node_modules\\vue-loader\\lib\\index.js","mtime":1615108060518}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Map.vue"],"names":[],"mappings":";;;;;;;;;;;;AAQA,OAAA,KAAA,MAAA,OAAA;AACA,SAAA,QAAA,QAAA,MAAA;AAEA,SAAA,kBAAA,QAAA,mBAAA;AACA,eAAA;AACA,EAAA,IADA,kBACA;AACA,WAAA;AACA,MAAA,aAAA,EAAA,IADA;AAEA,MAAA,OAAA,EAAA,IAFA;AAGA,MAAA,OAAA,EAAA,EAHA,CAGA;;AAHA,KAAA;AAKA,GAPA;AAQA,EAAA,QAAA,oBACA,QAAA,CAAA,CAAA,OAAA,CAAA,CADA,CARA;AAWA,EAAA,KAAA,EAAA;AACA,IAAA,KADA,mBACA;AACA,WAAA,aAAA,CAAA,OAAA;AACA,WAAA,SAAA;AACA,WAAA,aAAA;AACA,WAAA,YAAA;AACA;AANA,GAXA;AAoBA,EAAA,OApBA,qBAoBA;AACA;AACA,SAAA,OAAA,CAAA,gBAAA,CAAA,SAAA,EAAA,KAAA,OAAA;AACA,GAvBA;AAwBA,EAAA,OAxBA,qBAwBA;AACA,SAAA,SAAA,GADA,CAEA;;AACA,SAAA,OAAA,CAAA,IAAA,CAAA;AACA,MAAA,MAAA,EAAA,SADA;AAEA,MAAA,UAAA,EAAA,SAFA;AAGA,MAAA,QAAA,EAAA,KAHA;AAIA,MAAA,KAAA,EAAA;AAJA,KAAA;AAMA,IAAA,MAAA,CAAA,gBAAA,CAAA,QAAA,EAAA,KAAA,aAAA;AACA,SAAA,aAAA;AACA,GAnCA;AAoCA,EAAA,SApCA,uBAoCA;AACA,IAAA,MAAA,CAAA,mBAAA,CAAA,QAAA,EAAA,KAAA,aAAA;AACA,SAAA,OAAA,CAAA,kBAAA,CAAA,SAAA;AACA,GAvCA;AAwCA,EAAA,OAAA,EAAA;AACA,IAAA,SADA,uBACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,gBAAA,KAAA,CAAA,aAAA,GAAA,KAAA,CAAA,QAAA,CAAA,IAAA,CAAA,KAAA,CAAA,KAAA,CAAA,OAAA,EAAA,KAAA,CAAA,KAAA,CAAA,CADA,CAEA;AACA;AACA;;AAJA;AAAA,uBAKA,KAAA,CAAA,GAAA,CAAA,6CAAA,CALA;;AAAA;AAKA,gBAAA,GALA;;AAMA;AACA,gBAAA,KAAA,CAAA,QAAA,CAAA,WAAA,CAAA,OAAA,EAAA,GAAA,CAAA,IAAA;;AACA,gBAAA,UARA,GAQA;AACA,kBAAA,KAAA,EAAA;AACA,oBAAA,IAAA,EAAA,QADA;AAEA,oBAAA,IAAA,EAAA,EAFA;AAGA,oBAAA,GAAA,EAAA;AAHA,mBADA;AAMA,kBAAA,GAAA,EAAA;AACA,oBAAA,IAAA,EAAA,KADA;AAEA,oBAAA,GAAA,EAAA,OAFA;AAGA,oBAAA,GAAA,EAAA,IAHA;AAIA,oBAAA,MAAA,EAAA,IAJA;AAKA,oBAAA,SAAA,EAAA;AACA,sBAAA,SAAA,EAAA,SADA;AAEA,sBAAA,WAAA,EAAA;AAFA;AALA,mBANA;AAgBA,kBAAA,MAAA,EAAA;AACA,oBAAA,IAAA,EAAA,IADA;AAEA,oBAAA,MAAA,EAAA,IAFA;AAGA,oBAAA,MAAA,EAAA;AAHA;AAhBA,iBARA;;AA8BA,gBAAA,KAAA,CAAA,aAAA,CAAA,SAAA,CAAA,UAAA;;AACA,gBAAA,KAAA,CAAA,aAAA,CAAA,EAAA,CAAA,OAAA;AAAA,qFAAA,iBAAA,GAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACA,4BAAA,YADA,GACA,kBAAA,CAAA,GAAA,CAAA,IAAA,CADA,EAEA;AACA;;AAHA,gCAIA,KAAA,CAAA,OAAA,CAAA,YAAA,CAAA,GAAA,CAJA;AAAA;AAAA;AAAA;;AAAA;AAAA,mCAKA,KAAA,CAAA,GAAA,CAAA,0BAAA,YAAA,CAAA,IAAA,CALA;;AAAA;AAKA,4BAAA,IALA;AAMA,4BAAA,KAAA,CAAA,OAAA,CAAA,YAAA,CAAA,GAAA,IAAA,IAAA,CAAA,IAAA;;AACA,4BAAA,KAAA,CAAA,QAAA,CAAA,WAAA,CAAA,YAAA,CAAA,GAAA,EAAA,IAAA,CAAA,IAAA;;AAPA;AASA,4BAAA,YATA,GASA;AACA,8BAAA,GAAA,EAAA;AACA,gCAAA,GAAA,EAAA,YAAA,CAAA;AADA;AADA,6BATA;;AAcA,4BAAA,KAAA,CAAA,aAAA,CAAA,SAAA,CAAA,YAAA;;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAA;;AAAA;AAAA;AAAA;AAAA;;AA/BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA+CA,KAhDA;AAiDA;AACA,IAAA,OAlDA,mBAkDA,GAlDA,EAkDA;AACA;AACA,WAAA,OAAA,GAAA,GAAA;AACA,WAAA,YAAA;AACA,KAtDA;AAuDA,IAAA,YAvDA,0BAuDA;AACA;AACA,UAAA,QAAA,GAAA,KAAA,OAAA,CAAA,GAAA,CAAA,UAAA,IAAA,EAAA;AACA,eAAA,IAAA,CAAA,IAAA;AACA,OAFA,CAAA,CAFA,CAMA;AACA;;AACA,UAAA,SAAA,GAAA,KAAA,OAAA,CAAA,GAAA,CAAA,UAAA,IAAA,EAAA;AACA,eAAA;AACA,UAAA,IAAA,EAAA,eADA;AAEA,UAAA,YAAA,EAAA;AACA,YAAA,KAAA,EAAA,CADA;AAEA,YAAA,SAAA,EAAA;AAFA,WAFA;AAMA,UAAA,IAAA,EAAA,IAAA,CAAA,IANA;AAOA,UAAA,IAAA,EAAA,IAAA,CAAA,QAPA;AAQA,UAAA,gBAAA,EAAA;AARA,SAAA;AAUA,OAXA,CAAA;AAYA,UAAA,UAAA,GAAA;AACA,QAAA,MAAA,EAAA;AACA,UAAA,IAAA,EAAA;AADA,SADA;AAIA,QAAA,MAAA,EAAA;AAJA,OAAA;AAMA,WAAA,aAAA,CAAA,SAAA,CAAA,UAAA;AACA,KAlFA;AAmFA,IAAA,aAnFA,2BAmFA;AACA,UAAA,aAAA,GAAA,KAAA,KAAA,CAAA,OAAA,CAAA,WAAA,GAAA,GAAA,GAAA,GAAA;AACA,UAAA,aAAA,GAAA;AACA,QAAA,KAAA,EAAA;AACA,UAAA,SAAA,EAAA;AACA,YAAA,QAAA,EAAA;AADA;AADA,SADA;AAMA,QAAA,MAAA,EAAA;AACA,UAAA,SAAA,EAAA,aAAA,GAAA,CADA;AAEA,UAAA,SAAA,EAAA,aAAA,GAAA,CAFA;AAGA,UAAA,OAAA,EAAA,aAAA,GAAA,CAHA;AAIA,UAAA,SAAA,EAAA;AACA,YAAA,QAAA,EAAA,aAAA,GAAA;AADA;AAJA;AANA,OAAA;AAeA,WAAA,aAAA,CAAA,SAAA,CAAA,aAAA;AACA,WAAA,aAAA,CAAA,MAAA;AACA,KAtGA;AAuGA;AACA,IAAA,SAxGA,uBAwGA;AACA,UAAA,YAAA,GAAA;AACA,QAAA,GAAA,EAAA;AACA,UAAA,GAAA,EAAA;AADA;AADA,OAAA;AAKA,WAAA,aAAA,CAAA,SAAA,CAAA,YAAA;AACA;AA/GA;AAxCA,CAAA","sourcesContent":["<template>\r\n    <div class=\"com-container\" @dblclick=\"revertMap\">\r\n        <div class=\"com-chart\" ref=\"map_ref\">\r\n\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\nimport axios from 'axios'\r\nimport { mapState } from 'vuex'\r\n\r\nimport { getProvinceMapInfo } from '@/utils/map_utils'\r\nexport default {\r\n  data () {\r\n    return {\r\n      chartInstance: null,\r\n      allData: null,\r\n      mapData: {} // 所获取的省份的地图矢量数据信息\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapState(['theme'])\r\n  },\r\n  watch: {\r\n    theme () {\r\n      this.chartInstance.dispose()\r\n      this.initChart()\r\n      this.screenAdapter()\r\n      this.updatedChart()\r\n    }\r\n  },\r\n\r\n  created () {\r\n    // 在组件创建完成之后，进行回调函数的注册\r\n    this.$socket.registerCallBack('mapData', this.getData)\r\n  },\r\n  mounted () {\r\n    this.initChart()\r\n    // this.getData()\r\n    this.$socket.send({\r\n      action: 'getData',\r\n      socketType: 'mapData',\r\n      charName: 'map',\r\n      value: ''\r\n    })\r\n    window.addEventListener('resize', this.screenAdapter)\r\n    this.screenAdapter()\r\n  },\r\n  destroyed () {\r\n    window.removeEventListener('reszie', this.screenAdapter)\r\n    this.$socket.unRegisterCallBack('mapData')\r\n  },\r\n  methods: {\r\n    async initChart () {\r\n      this.chartInstance = this.$echarts.init(this.$refs.map_ref, this.theme)\r\n      // 获取中国地图的矢量地图\r\n      // http://localhost:8080/static/map/China.json\r\n      // 由于我们现在获取的地图矢量数据并不是位于KOA2的后台\r\n      const ret = await axios.get('http://localhost:8080/static/map/China.json')\r\n      // console.log(ret)\r\n      this.$echarts.registerMap('china', ret.data)\r\n      const initOption = {\r\n        title: {\r\n          text: '┃ 商家分布',\r\n          left: 20,\r\n          top: 20\r\n        },\r\n        geo: {\r\n          type: 'map',\r\n          map: 'china',\r\n          top: '5%',\r\n          bottom: '5%',\r\n          itemStyle: {\r\n            areaColor: '#2E72BF',\r\n            borderColor: '#333'\r\n          }\r\n        },\r\n        legend: {\r\n          left: '5%',\r\n          bottom: '5%',\r\n          orient: 'vertical'\r\n        }\r\n      }\r\n      this.chartInstance.setOption(initOption)\r\n      this.chartInstance.on('click', async arg => {\r\n        const provinceInfo = getProvinceMapInfo(arg.name)\r\n        // 需要获取省份的地图矢量数据\r\n        // 判断当前所点击的省份的地图矢量数据是否在mapData中\r\n        if (!this.mapData[provinceInfo.key]) {\r\n          const ret = await axios.get('http://localhost:8080' + provinceInfo.path)\r\n          this.mapData[provinceInfo.key] = ret.data\r\n          this.$echarts.registerMap(provinceInfo.key, ret.data)\r\n        }\r\n        const changeOption = {\r\n          geo: {\r\n            map: provinceInfo.key\r\n          }\r\n        }\r\n        this.chartInstance.setOption(changeOption)\r\n      })\r\n    },\r\n    // async getData () {\r\n    getData (ret) {\r\n      // const { data: ret } = await this.$http.get('map')\r\n      this.allData = ret\r\n      this.updatedChart()\r\n    },\r\n    updatedChart () {\r\n      // 图例的数据\r\n      const legenArr = this.allData.map(item => {\r\n        return item.name\r\n      })\r\n\r\n      // return这个对象就代表的是一个类别下的所有散点数据\r\n      // 如果想在地图中显示数据，所以我们需要给散点的图标添加一个配置，coordinateSystem: geo\r\n      const seriesArr = this.allData.map(item => {\r\n        return {\r\n          type: 'effectScatter',\r\n          rippleEffect: {\r\n            scale: 5,\r\n            brushType: 'stroke'\r\n          },\r\n          name: item.name,\r\n          data: item.children,\r\n          coordinateSystem: 'geo'\r\n        }\r\n      })\r\n      const dataOption = {\r\n        legend: {\r\n          data: legenArr\r\n        },\r\n        series: seriesArr\r\n      }\r\n      this.chartInstance.setOption(dataOption)\r\n    },\r\n    screenAdapter () {\r\n      const titleFontSize = this.$refs.map_ref.offsetWidth / 100 * 3.6\r\n      const adapterOption = {\r\n        title: {\r\n          textStyle: {\r\n            fontSize: titleFontSize\r\n          }\r\n        },\r\n        legend: {\r\n          itemWidth: titleFontSize / 2,\r\n          itemHight: titleFontSize / 2,\r\n          itemGap: titleFontSize / 2,\r\n          textStyle: {\r\n            fontSize: titleFontSize / 2\r\n          }\r\n        }\r\n      }\r\n      this.chartInstance.setOption(adapterOption)\r\n      this.chartInstance.resize()\r\n    },\r\n    // 回到中国地图\r\n    revertMap () {\r\n      const revertOption = {\r\n        geo: {\r\n          map: 'china'\r\n        }\r\n      }\r\n      this.chartInstance.setOption(revertOption)\r\n    }\r\n\r\n  }\r\n}\r\n</script>\r\n<style>\r\n\r\n</style>\r\n"],"sourceRoot":"src/components"}]}